-- migrate:up
-------------------------------------------------------------------------------
-- View: view__list_record_tags
-------------------------------------------------------------------------------
-- CREATE
-- OR REPLACE VIEW PUBLIC.view__list_record_tags AS
-- SELECT
--   vlo.chain_id,
--   vlo.contract_address,
--   vlo.nonce,
--   vlo.record,
--   GET_BYTE(vlo.data, 0) AS record_version,
--   GET_BYTE(vlo.data, 1) AS record_type,
--   SUBSTRING(
--     vlo.data
--     FROM
--       3
--   ) AS record_data,
--   vlo.tag as record,
--   vlo.block_number,
--   vlo.transaction_index,
--   vlo.log_index
-- FROM
--   PUBLIC.view__list_ops vlo
--   INNER JOIN (
--     SELECT
--       chain_id,
--       contract_address,
--       nonce,
--       (public.unpack__list_record_tag(data)).list_record_bytea AS record,
--       (public.unpack__list_record_tag(data)).tag,
--       -- order by block_number, transaction_index, log_index
--       -- This helps in identifying the latest operation for each unique record
--       MAX(
--         PUBLIC.sort_key (block_number, transaction_index, log_index)
--       ) AS max_sort_key
--     FROM
--       PUBLIC.view__list_ops
--     WHERE
--       -- restrict to opcodes 3 (add record tag) or 4 (remove record tag)
--       opcode = 3
--       OR opcode = 4
--     GROUP BY
--       chain_id,
--       contract_address,
--       nonce,
--       (public.unpack__list_record_tag(data)).list_record_bytea,
--       (public.unpack__list_record_tag(data)).tag
--   ) AS max_records ON vlo.chain_id = max_records.chain_id
--   AND vlo.contract_address = max_records.contract_address
--   AND vlo.nonce = max_records.nonce
--   AND (public.unpack__list_record_tag(vlo.data)).record = max_records.record
--   AND (public.unpack__list_record_tag(vlo.data)).tag = max_records.tag
--   AND PUBLIC.sort_key (
--     vlo.block_number,
--     vlo.transaction_index,
--     vlo.log_index
--   ) = max_records.max_sort_key
-- WHERE
--   opcode = 3;
-- migrate:down
